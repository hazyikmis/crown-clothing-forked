{"version":3,"sources":["pages/shop/shop.component.jsx"],"names":["CollectionsOverviewContainer","lazy","CollectionPageContainer","connect","dispatch","fetchAllCollectionsStartAsync","fetchCollectionsStart","match","useEffect","className","fallback","exact","path","component"],"mappings":"sHAAA,2DA6BMA,EAA+BC,gBAAK,kBACxC,iCAGIC,EAA0BD,gBAAK,kBACnC,iCAyEaE,sBAAQ,MAjBI,SAACC,GAAD,MAAe,CAKxCC,8BAA+B,kBAAMD,EAASE,mBAYjCH,EAtEE,SAAC,GAA8C,IAA5CE,EAA2C,EAA3CA,8BAA+BE,EAAY,EAAZA,MAoBjD,OATAC,qBAAU,WACRH,MACC,CAACA,IAQF,yBAAKI,UAAU,aAEb,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKL,EAAMK,MAOfC,UAAWb,IAGb,kBAAC,IAAD,CACEY,KAAI,UAAKL,EAAMK,KAAX,kBAQJC,UAAWX","file":"static/js/8.379fb64c.chunk.js","sourcesContent":["//AFTER USING CONTAINER PATTERN/APPROACH FOR CollectionsOverview & CollectionPage\r\n//COMPONENTS, THIS COMPONENT HIGHLY SIMPLIFIED\r\n\r\nimport React, { useEffect, lazy, Suspense } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\n//import CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\r\n//import CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\r\n\r\n//import CollectionPage from \"../collection/collection.component\";\r\n//import CollectionPageContainer from \"../collection/collection.container\";\r\n\r\n//import {firestore, convertCollectionsSnapshotMap} from \"../../firebase/firebase.utils\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\n//import { updateCollections } from \"../../redux/shop/shop.actions\";\r\n//import { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\r\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\r\n//import { createStructuredSelector } from \"reselect\";\r\n//import { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\r\n\r\n//import WithSpinner from \"../../components/with-spinner/with-spinner.hoc.component\";\r\n\r\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nimport Spinner from \"../../components/spinner/spinner.component\";\r\n\r\nconst CollectionsOverviewContainer = lazy(() =>\r\n  import(\"../../components/collections-overview/collections-overview.container\")\r\n);\r\n\r\nconst CollectionPageContainer = lazy(() =>\r\n  import(\"../collection/collection.container\")\r\n);\r\n\r\nconst ShopPage = ({ fetchAllCollectionsStartAsync, match }) => {\r\n  //state = { loading: true }; //for showing of not showing the spinner component\r\n\r\n  //with the adding redux-thunk and all async fetch data code moved into the shop.actions\r\n  //If you want to see previous code, please check shop.component0.jsx\r\n\r\n  // componentDidMount() {\r\n  //   const { fetchAllCollectionsStartAsync } = this.props;\r\n  //   fetchAllCollectionsStartAsync();\r\n  // }\r\n\r\n  useEffect(() => {\r\n    fetchAllCollectionsStartAsync();\r\n  }, [fetchAllCollectionsStartAsync]);\r\n\r\n  //render() {\r\n  //const { match } = this.props;\r\n  //const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\r\n  //const { match, isCollectionsLoaded } = this.props;\r\n  //const { match } = this.props;\r\n  return (\r\n    <div className=\"shop-page\">\r\n      {/* <Route exact path={`${match.path}`} component={CollectionsOverview} /> */}\r\n      <Suspense fallback={<Spinner />}>\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          // render={(props) => (\r\n          //   <CollectionsOverviewWithSpinner\r\n          //     isLoading={isCollectionFetching}\r\n          //     {...props}\r\n          //   />\r\n          // )}\r\n          component={CollectionsOverviewContainer}\r\n        />\r\n        {/* <Route path={`${match.path}/:collectionId`} component={CollectionPage} /> */}\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          // render={(props) => (\r\n          //   <CollectionPageWithSpinner\r\n          //     //isLoading={isCollectionFetching}\r\n          //     isLoading={!isCollectionsLoaded}\r\n          //     {...props}\r\n          //   />\r\n          // )}\r\n          component={CollectionPageContainer}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n//}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  //after adding redux-thunk, we do not need the codes below\r\n  // updateCollections: (collectionsMap) =>\r\n  //   dispatch(updateCollections(collectionsMap)),\r\n  //fetchAllCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\r\n  fetchAllCollectionsStartAsync: () => dispatch(fetchCollectionsStart()),\r\n});\r\n\r\n/*\r\nconst mapStateToProps = createStructuredSelector({\r\n  //isCollectionFetching: selectIsCollectionFetching,\r\n  isCollectionsLoaded: selectIsCollectionsLoaded,\r\n});\r\n*/\r\n\r\n//export default connect(null, mapDispatchToProps)(ShopPage);\r\n//export default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n\r\n/*\r\nconst ShopPage = ({ match }) => (\r\n  <div className='shop-page'>\r\n    <Route exact path={`${match.path}`} component={CollectionsOverview} />\r\n    <Route path={`${match.path}/:collectionId`} component={CollectionPage} />\r\n  </div>\r\n);\r\n\r\nexport default ShopPage;\r\n*/\r\n"],"sourceRoot":""}